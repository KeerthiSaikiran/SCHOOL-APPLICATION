The following untracked files cannot be merged error:
    execute the command "git clean -d -f ." in terminal

Commands to perform operations on the database using python shell on terminal

    python manage.py shell

    from django.db import connection
    cur = connection.cursor()
    cur.execute("select * from admissions_student")
        Here migrate will create the table on the database as applicationname_modelname
        we give our command to be executed in the execute function
    res = cur.fetchall() --store all the values in the cur into the res list variable
    print(res) prints all the values in the res

    To exit python shell type command ctrl z and hit enter


Database settings for Mysql database:

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }

    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'schoolapp',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': '',
        'PORT': '',
    }
}

Note -
    Host and Port are not required to be specified if we are using database on the same system.
        If we are using database on remote server we need to specify.
    Never use root database for database access. so don't give root user credentials in settings.py

create a new database for the project:

    create database schoolapp

To create a new user to access the schoolapp database -
    create user 'schoolappuser'@'localhost' identified with mysql_native_password by 'schoolapp123';

Grant the newly created user the access to the database -
    grant all on schoolapp.* to 'schoolappuser'@'localhost';

database settings:

    Name = schoolapp
    username = schoolappuser
    password = schoolapp123

Django admin credentials-

    username = admin
    email address = admin.schoolapp@mail.com
    Password = pswrd1234

Django ORM ( Object Relational Mapping ) -
-------------------------------------------------------------

Mysql to Django Orm conversion

Mysql query returns the data in table and column representation
Django ORM returns the data in the form of query set

To acees data in a query set we can loop through it

To see the sql query executed we can print useing print(queryset.query)

To select all the rows in a table
Mysql      -   select * from table_name;
               qs = select * from admissions_student;
Django ORM -   model_name.objects.all()
               qs = Student.objects.all()

To select all from a table using where clause
Mysql       - select * from table_name where condition;
              select * from admissions_table where id = 3;
Django ORM  - model_name.objects.get(condition); --> If only single value is present in table with this condtion
                        (mostly used if condition is on primary key i.e, unique column)
              qs = Student.objects.get(id=3)




To retreive specific column values
Mysql       - select coulmn_names from admissions_student --> column names are comma(,) seperated
              select id,name,contact from admissions_student;
Django ORM  - table.objects.all().values_list(columnames) --> column names are comma(,) seperated and with ''
                    --> Retrieves data as individual tuples in a queryset
              qs = Student.objects.all().values_list('id', 'name', 'contact') --> column names are comma(,) seperated and with ''
                            or
              table.objects.all().values(columnames) --> column names are comma(,) seperated and with ''
               --> Retrieves data as individual dictionaries for each row
              qs = Student.objects.all().values('id', 'name', 'contact')
                            or
              table.objects.all().only(columnames) --> column names are comma(,) separated and with ''
                --> returns rows as objects and adds id feild even if we not given in query
                --> To get the data we need to iterate through the query set that is returned.
              qs = Student.objects.all().only('id', 'name', 'contact')



Filtering using (gt,gte,lt,lte,contains,icontains,in,startswith,endswith)
gt - greater than, gte - greater than or equal to, lt - less than, lte - less than or equal to

greater than, greater than or equal to, less than or less than or equal to-
      Mysql      - select * from table_name where condition --> condition is as per requirement(>, >=, <, <=).
                   select * from table_name where id>3

      Django ORM - model_name.objects.filer(columnname__abbreviation=value)
                                -->  abbreviations :gt = greater than, gte = greater than or equal to, lt = less than,
                                        lte = less than or equal to
                   qs = Student.objects.filter(id__gt=3) --> returns query set of objects for each row. To get the value of iterate over query set

contains, startswith, endswith -
  contains in django is same as like in sql -
       Mysql      - select * from table_name where columnname LIKE 'regularexpression'
                    select * from admissions_student where name LIKE '%Sh%';

       Django ORM - Model_name.objects.filter(columnname__contains = 'substring')
                    qs = Student.objects.filter(name__contains = 'Sh') --> contains is case sensitive
                    qs = Student.objects.filter(name__icontains = 'Sh') --> icontains is case insensitive i.e, not case sensitive

  startswith -
        Mysql      - select * from admissions_studnet where name LIKE 'Sai%';
        Django ORM - Student.objects.filter(name__startswith('Sai'));

  endswith -
        Mysql       - select * from admissions_student where name LIKE 'Sh%';
        Django ORM - Student.objects.filter(name__endswith('Sh'))

  in -
    used to retrieve the set of specified values
        Mysql      - select * from admissions_student where id in (1,3,5);
        Django ORM - Student.objects.filter(id__in = [1,3,5])

Logical Operators (And, Or, Not) -

    And-
        Mysql       - select * from admissions_student where id > 3 AND classname <= 2
        Django ORM  - Student.Objects.filter(id__gt = 3) & Student.Objects.filter(classname__lte = 2)
    Or -
        Mysql       - select * from admissions_student where id >= 3 OR name LIKE '%s';
        Django ORM  - Student.objects.filter(id__gte = 3) | Student.objects.endswith('s')
    Not -
        Mysql       - select * from admissions_student where NOT id <= 5;
        Django ORM  - Student.objects.exclude(id__lte = 5)



Aggregate Functions (Avg, Sum, Max, Min, Count) -
--------------------------------------------------------------------

first import the packages-
from django.db.model import Avg, Sum, Max, Min, Count

StudentsClassnameAvg = Student.objects.all().aggregate(Avg('classname'))
print(studentsClassnameAvg)
O/p - {'classname__avg': 4.2}

StudentsIdSum = Student.objects.all().aggregate(Sum('id'))
print(StudentsIdSum)
O/p - {'id__sum' Decimal('15')}

StudentsIdMax = Student.objects.all().aggregate(Max('id'))
print(StudentsIdMax)
O/p - {'id__sum' Decimal('15')}

Aggregate functions can also be used to apply on other queries also
ex - MaxId = Student.objects.filter(id__gt = 3).aggregate(Max('id'))
     print(MaxId)
     O/p - {'id__MaxId': 5}



 Inserting data into database (create) -
 --------------------------------------------------

 Inserting-
    1.
        create an object
        save

        Object_name = Model_name(columnsnames = value) --> columnames and valueas are comma , seperated)
        Object_name.save()

        Ex- s = Student(name='Ramesh', fathername='Somu', classname = 2, contact='1232343456')
            s.save()


    2.
        using the create method, bulk create method

        create method -

        Model_name.objects.create(columnnames = value)

        ex- Student.objects.create(name='Ramu', fathername='Anand', classname=4 , contact='3455666666'')

        bulk create method -

        Model_name.objects.bulk_create(
        [
            Model_name(columnnames = values),
                .
                .
                .
                .
         ]
         )

         ex -
         Student.objects.bulk_create(
         [
         Student(name='Ramesh', fathername='Somu', classname=2, contact='1232343456'),
         student(name='Anand', fathername='Prakash', classname=2, contact='9088088978'),
         Student(name='Fahreen', fathername='Azad', classname=9, contact='0986800869')
         ]
         )



 Delete from table -

    use the delete() method

    create a new object to retreive the data then
    object_name.delete()

    ex- delobj = Student.objects.get(id=7)
        delobj.delete()

       O/p = (1, {'admissions_Student': 1})

    ex - s = Student.objects.filter(id__in=[10,11])
         s.delete()

         O/p - (2, {'admissions_Student': 2})

Updating the data -

    If the data is existing then it updates otherwise creates new data

    create a new object to retreive the data then
    columnname = new value
            .
            .
            .
            .

     object_name.save()

     ex - s = Student.objects.get(id=6)
          s.classname=8
          s.contact='1111111111'
          s.save()



Sorting the data -

    using the order by function

    Ascending Order -
    Mysql       - select * from Student order by classname;
    Django  ORM - s = Student.objects.all().order_by('classname')
             for s in students:
             print (s.name)

    Descending Order -
    Mysql      - select * from admissions_student order by classname desc;
    Django ORM - s = Student.objects.all().order_by('-classname')
                 for s in students:
                 print(s.name)


    If the data from the given condition is having same value then we can define any other column also

    Ex - s = Student.objects.all().order_by('classname', 'id')




Model Forms -

    Django Model Forms provides a way to link the data submitted by the client through the form to a Data Model created to store the entry.

    Using ModelForm, we can efficiently perform the above task without writing much code.

    To create model forms -

        1) Create a file forms.py in your application folder
        2) Create a class that is inherited from forms.ModelForm
        3) Create a class Meta inside above model form class
        4) Use ModelForm in template
        5) Display the form in the template



    Read from the input and save in databse

        1) get form object with inputs
        2) save


    To avoid the csrf token error after submitting the data we need to give {% csrf_token %} in the template form tag



Forms -

    Django provides a Form class which is used to create HTML forms. It describes a form and how it works and appears.

    It is similar to the ModelForm class that creates a form by using the Model, but it does not require the Model.

    Each field of the form class map to the HTML form <input> element and each one is a class itself, it manages form data and performs validation while submitting the form.

    Form is used when we need to take the input from the user and perform some operations or process that data but do not require to store that data.

    To create forms -

    1) create a file forms.py in your application folder
    2) Create a class that is inherited from the forms.Form
    3) Define the fields
    4) use Form in view
    5) Display the form in the template



Class based views -

    1) create subclass of view - dajango.views.generic
    2) Implement seperate methods for each http method
    3) In urls.py use classname.as_view()

CRUD Operations using Class based views

    Reading Data from Datadase -

        To perform Read operation we need to use ListView. Steps are as follows

            1) Create a class based view that inherits from ListView
            2) Provide value to the model attribute (mandatory). Django will pass all the data on the model
               to the default template that is need to be created.
            3) Default template name is modelname_list.html. You may pass your own template name
               by passing the value to the template_name attribute in the class based view.
            4) Defaujlt context_object_name (object that receives all the objects from ORM) is modelname_list. You can use this object intemplate to access data in model.
               You can set your own name to the context_object_name by passing string value to this name in the class based view
            5) Create a template with the name modelname_list.html and print the object's attributes from the list received (modelname_list).
            6) Configure the url (classname.as_view()) in urls.py.

    Retreiving data from the database -

        To perform Read operation we need to use ListView. Steps are as follows

            1) Create a class based view that inherits from DetailView
            2) Provide value to the model attribute (mandatory). Django will pass all the data on the model
               to the default template that is need to be created.
            3) Default template name is modelname_detail.html. You may pass your own template name
               by passing the value to the template_name attribute in the class based view.
            4) Defaujlt context_object_name (object that receives all the objects from ORM) is modelname. You can use this object in template to access data in model.
               You can set your own name to the context_object_name by passing string value to this name in the class based view
            5) Create a template with the name modelname_detail.html and print the object's attributes from the modelname.
            6) Configure the url path('getdetails/<int:pk>/') in urls.py.


    Create Operations on Class based views -

        To perform this operations to use CreateView. Steps are as folloes :

            1) Create a class based view that inherits form CreatedView
            2) Provide value to the model attribute (mandatory)
            3) Provide value to fields (fields = (fields seperated by comma))
            4) Default template name is modelname_form.html you may pass your own template name by passing value to the template_name attribute
            5) Create a method get_absolute_url in model class

                    get_absolute_url(self):
                        return reverse('urlname',kwargs = {'pk':self.pk})

            6) Create a template with name modelname_form.html
            7) Configure the url (classname.as_view())

            get_absolute_url() is called after successfull completion of the create/update operations.
            we have to send the arguments to the urls only when it is required. here args is optional.
            We can send the arguments to the url by using args/kwargs in reverse function


    Delete Operation on class based views -

            To perform the delete operaions we need to use DeleteView. Steps are as follows

                1) Create a class that inherits from DeleteView
                2) Provide value to the model attribute (mandatory)
                3) Provide value to the success_url = reverse_lazy('urlname')
                4) Create model_confirm_delete.html to which django forward us and waits for our confirmation.
                5) Configure the url (classname.as_view())



Security in Django ( Authentication and Authorization) -

    Allowing users to log in to your website solves two problems: authentication and authorization.
    Authentication is the act of verifying a user’s identity, confirming they are who they say they are.
    Authorization is deciding whether a user is allowed to perform an action. The two concepts go hand in hand:
        if a page on your website is restricted to logged-in users, then users have to authenticate before they can be authorized to view the page.

    Django provides tools for both authentication and authorization. Django view authorization is typically done with decorators. This tutorial will show you how to use these view decorators to enforce authorized viewing of pages in your Django site.

    Authentication:

        Authentication is the process of verifying a user’s identity. In web applications, this usually involves checking the user’s credentials (e.g., username and password) against a database of registered users.
        If the provided credentials match a user in the database, the user is considered authenticated.

        Django’s built-in authentication system provides a robust and flexible framework for managing user authentication. It includes a User model for storing user information, as well as views and forms for handling user registration, login, and password management.

        Authentication is used for login into the website. We can define which view we want to have authentication to access that view through the url.
        The views which we define to be authenticated they cant be accessed without providing correct username and password.

        Steps to authentication -

            1) Add the auth urls -

                In urls.py file on the project directory add the following in urlpatterns :

                    path('accounts/', include('django.contrib.auth.urls'))

                    Here /accounts url is automatically provided by django. By including this url we can easily access the login and logout functionality provided by django.

            2) Create the login form -

                In templates forlder on the project directory create a folder and name as registration. In registration folder create a html file and name as login.html
                Django automatically create the login form for us and sends to login.html automatically. We can access the login form by writing {{form.as_p}}  or {{form.as_table}}
                    in the form tag under body tag in login.html file

            3) Secure the views -

                We have to secure the function based views and class based views on different ways

                    Function based views - add @login_required above the view
                    Class based views - in the urls.py folder on application folder in the path write as login_required(view.as_view())
                        ex - path('firstclassbasedview/', login_required(views.FirstClassBasedView.as_view())),
                        u can assing name to the view if u want as usually we can do if required.

                we can logout from the application by accounts/logout endpoint and it takes to the default django adminstrator logout page. If we want to define the logout page then

                        create a variable on the seeting.py file in the project directory - LOGOUT_REDIRECT_URL = '/userlogout' and create template, view, url mapping respectively for logout page.

            4) Create users -

                Users having the permissions to access the appication can access the secured views by providing the ucorrect username and password on the login page.

                Creating a user with the following credentials through django admin website.
                Sample user login credentials -

                Username - sampleuser
                Password - User123@123

                On the login page provide the correct username and password then django redirects to the requested view.

                We can define all the rules and access permisions to the users we create through the django admin portal.

             5) Test it -

                Test after the completion.



    Authorization -

        Once a user is authenticated, the next step is to determine what they are allowed to do within the application. This process is known as authorization. Authorization is usually based on user roles, groups, or permissions that define what actions a user can perform.

        Django’s authorization system is built on top of its authentication system and allows developers to control access to different parts of the application easily. Django provides a default set of permissions for its built-in models (e.g., add, change, delete)
        and allows developers to create custom permissions for their own models.

        Permissions:
            Permissions are actions that a user can perform on a specific model, such as adding, changing, or deleting objects. Django automatically creates default permissions for each model in your application:

            add_modelname: Permission to add new objects of the model.
            change_modelname: Permission to change existing objects of the model.
            delete_modelname: Permission to delete existing objects of the model.

            Permissiona can be set to users or groups. Groups are the group of users having a set of permissions and rules. We can create users and groups in django admin site and add users to the groups.Permission


        To provide the authorization in the django we can give with a decorator @permisions_required('applicationname.permission_Modelname') in the view. and we have to proviede the permissions to the user or group in django admin site
        so that they are authorized to perform that action.required





Session Management in Django -

    HTTP - Http is a standard Stateless Protocol. It is responsible for client and server communication. We will send some data through the request and http send back some data through response.
        There are three basic features that make HTTP a simple but powerful protocol:

        HTTP is connectionless: The HTTP client, i.e., a browser initiates an HTTP request and after a request is made, the client waits for the response. The server processes the request and sends a response back after which client disconnect
        the connection. So client and server knows about each other during current request and response only. Further requests are made on new connection like client and server are new to each other.

        HTTP is media independent: It means, any type of data can be sent by HTTP as long as both the client and the server know how to handle the data content. It is required for the client as well as
        the server to specify the content type using appropriate MIME-type.

        HTTP is stateless: As mentioned above, HTTP is connectionless and it is a direct result of HTTP being a stateless protocol. The server and client are aware of each other only during a current request.
         Afterwards, both of them forget about each other. Due to this nature of the protocol, neither the client nor the browser can retain information between different requests across the web pages.

        To store the state(data sent by request and response) and temporary data(like user search data or passwords or user activities or actions) we implement hidden variables or cookies or sessions.



    Hidden Variables -

        In hidden variables we send the temporary data which user provide through form we convert the buttons in the html template to form type = "url"
        and in the view of that url under the form we assingn variable names to the form variable and send that as dictionary to template by the render function of the return statement
        In the template we can access the data by {{key}} and {{value}} pairs of the dictionary.variable
        To send that data into next template we have to same process for the next templates and their views. So this increases the burden for implementation to developer and burden for network too. so cookies are introduced.



    Cookies - Small amount of information stored on the client server.

        HTTP cookies (also called web cookies, Internet cookies, browser cookies, or simply cookies) are small blocks of data created by a web server while a user is
        browsing a website and placed on the user's computer or other device by the user's web browser. Cookies are placed on the device used to access a website, and
         more than one cookie may be placed on a user's device during a session.

        Cookies serve useful and sometimes essential functions on the web. They enable web servers to store stateful information (such as items added in the shopping cart in
        an online store) on the user's device or to track the user's browsing activity (including clicking particular buttons, logging in, or recording which pages were visited
         in the past).[1] They can also be used to save for subsequent use information that the user previously entered into form fields, such as names, addresses, passwords, and payment card numbers.

        We can set a limited number of cookies in a browser for a domain. Most of the browsers the limit is 15.
        We can see the cookies in the browser with the help of developer tools.variable

        Create a cookie -

            response.set_cookie(name, value, expiry-time)

        To retrieve cookies -

            request.COOKIES - dictionary of all cookies

            request.COOKIES[name] - single cookie

        Once we create the cookies we can access them through out all the templates by above retreival method.

        Refer the view - add vendor and template - add-admission.html for cookies implementation

        To check the cookies functionality and check whether cookies are enabled or not in the browser in django introduced three methods

            set_test_cookie() - To create a cookie to test
            test_cookie_woorked() - To check whether the created tst cookie is working or not
            delete_test_cookie() - To delete the created test cookie

        The problems of cookies is -

            Some users will disable cookies on the browser. Along with cookies even csrf token verification will also fail. To overcome this problem Sessions are introduced.



    Sessions - Sessions are similar to cookies, they are stored in client browser and maintained in the server also. So even if the cookies are disabled in the browser the server will transfer the cookies maintained by the server through the url.

        Sessions will use url rewriting concept.

        Create a session -

            request.session[name] = value

        To retrieve session -

            request.session.get(name)







